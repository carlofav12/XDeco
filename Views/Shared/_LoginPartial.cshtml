@using XDeco.Models;
@using Microsoft.AspNetCore.Identity
@inject SignInManager<Usuario> SignInManager
@inject UserManager<Usuario> UserManager

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">
                Hola @await GetUserNameAsync()
            </a>
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout"
                asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Cerrar Sesión</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Registrarse</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Ingresar</a>
        </li>
    }
</ul>

@functions {
    private async Task<string> GetUserNameAsync()
    {
        // Obtiene el usuario actual utilizando el UserManager
        var usuario = await UserManager.GetUserAsync(User);
        if (usuario != null)
        {
            return $"{usuario.Nombres} {usuario.ApellidoPaterno}";  // Nombre completo del usuario
        }
        return "Usuario";  // Valor por defecto en caso de que no se encuentre el usuario
    }
}
